FROM ubuntu:16.04 AS build1
LABEL Author="Jeremy Mathews" \
      Maintainer="b.cantarel@gmail.com"

# install additional requirements
RUN apt-get update && apt-get install -y \
   wget \
   unzip \
   python3-pip \
   git \
   libz-dev \
   libbz2-dev \
   liblzma-dev

RUN apt-get install -y graphviz

# Install Freebayes
ENV GIT_SSL_NO_VERIFY true
RUN cd /opt; git clone --recursive --branch v1.2.0 git://github.com/ekg/freebayes.git; \
    cd freebayes; \
    make; make install;   

# Install Vt
RUN apt-get install -y libssl-dev libcurl4-openssl-dev
RUN cd /opt/bin; wget --no-check-certificate https://github.com/atks/vt/archive/0.57721.tar.gz; \
    tar xvfz 0.57721.tar.gz; rm -rf 0.57721.tar.gz; \
    cd vt-0.57721; \
    make; \
    mv vt /usr/local/bin/;
# Install Shimmer
RUN apt update ; apt-get install -y build-essential  r-base
RUN R -e "install.packages('statmod',repos = \"http://cran.us.r-project.org\")"
RUN apt-get install -y  cpanminus
RUN cpanm CPAN::Meta Module::Build
RUN cd /opt; wget --no-check-certificate https://github.com/bcantarel/Shimmer/archive/v0.1.2.zip; \
    unzip v0.1.2.zip; rm v0.1.2.zip; \
    cd  Shimmer-0.1.2; \
    perl Build.PL; \
    ./Build; ./Build test; ./Build install;

# Make destination and work directory
RUN mkdir -p /opt;
RUN mkdir -p /opt/bin;
#ENV http_proxy http://proxy.swmed.edu:3128/
#ENV https_proxy http://proxy.swmed.edu:3128/

# Install cutadapt
RUN pip3 install cutadapt==1.9.1

# Install trim_galore
RUN cd /opt; wget --no-check-certificate https://github.com/ComputationalSystemsBiology/EoulsanDockerFiles/raw/master/TrimAdapt/trim_galore_v0.4.1.zip; \
    unzip trim_galore_v0.4.1.zip; rm trim_galore_v0.4.1.zip; \
    chmod u+x /opt/trim_galore_zip/trim_galore; \
    ln -s /opt/trim_galore_zip/trim_galore /usr/local/bin/trim_galore;

# Install Scripts
ENV repodir /seqprg
RUN mkdir -p /seqprg; \
    cd /seqprg; wget --no-check-certificate https://github.com/bcantarel/process_scripts/archive/version_1.0.9.tar.gz; tar xvfz version_1.0.9.tar.gz; \
    #git clone -b version_1.0.9 --single-branch --recursive https://github.com/bcantarel/process_scripts.git; \
    mv process_scripts-version_1.0.9 process_scripts; cd process_scripts; \
    cp -r preproc_fastq/* /usr/local/bin/

ENV isdocker 1
ENV PATH "$PATH:/usr/local/bin"

WORKDIR /data/

FROM build1 AS build2
COPY --from=build1 /opt/ /opt/
COPY --from=build1 /usr/local/bin/ /usr/local/bin/
COPY --from=build1 /usr/local/lib/ /usr/local/lib/
LABEL Author="Jeremy Mathews" \
      Maintainer="b.cantarel@gmail.com"

# install additional requirements
RUN apt-get clean; apt-get update; apt-get install -y build-essential checkinstall; \
    apt-get install -y libreadline-gplv2-dev cmake patch libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev zlib1g-dev liblzma-dev libcurl4-gnutls-dev libncurses5-dev wget unzip git default-jre default-jdk libtbb-dev pigz;

ARG ABRA2_VERSION=2.20
ENV ABRA2_VERSION ${ABRA2_VERSION}
ENV JAVA_OPTS "-Xmx16G"

RUN mkdir -p /opt;
RUN mkdir -p /opt/bin;

RUN cd /opt/bin; wget  --no-check-certificate https://github.com/mozack/abra2/releases/download/v${ABRA2_VERSION}/abra2-${ABRA2_VERSION}.jar; chmod 755 /opt/bin/abra2-${ABRA2_VERSION}.jar; ln -s /opt/bin/abra2-${ABRA2_VERSION}.jar /usr/local/bin/abra2.jar 

# Install SamTools
RUN cd /opt; wget --no-check-certificate https://github.com/samtools/samtools/releases/download/1.10/samtools-1.10.tar.bz2; \
    tar -vxjf samtools-1.10.tar.bz2; rm samtools-1.10.tar.bz2; \
    cd samtools-1.10; \
    ./configure; make; make install; \
    cp samtools /usr/local/bin;

# Install Scripts
ENV repodir /seqprg
RUN mkdir -p /seqprg; \
    cd /seqprg; wget --no-check-certificate https://github.com/bcantarel/process_scripts/archive/version_1.0.9.tar.gz; tar xvfz version_1.0.9.tar.gz; \
    #git clone -b version_1.0.9 --single-branch --recursive https://github.com/bcantarel/process_scripts.git; \
    mv process_scripts-version_1.0.9 process_scripts; cd process_scripts; \
    cp -r alignment/* /usr/local/bin/; \
    cp -r variants/* /usr/local/bin/

ENV isdocker 1
ENV PATH "$PATH:/usr/local/bin"

WORKDIR /data/
FROM build2 AS build3
COPY --from=build2 /opt/ /opt/
COPY --from=build2 /usr/local/bin/ /usr/local/bin/
COPY --from=build2 /usr/local/lib/ /usr/local/lib/
LABEL Author="Jeremy Mathews" \
      Maintainer="b.cantarel@gmail.com"

# install additional requirements
RUN apt-get clean; apt-get update; apt-get install -y build-essential checkinstall; \
    apt-get install -y libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev zlib1g-dev liblzma-dev libcurl4-gnutls-dev libncurses5-dev wget unzip git default-jre default-jdk r-base cmake patch gfortran hdf5-tools libboost-date-time-dev libboost-program-options-dev libboost-system-dev libboost-filesystem-dev libboost-iostreams-dev libhdf5-dev fort77 xorg-dev libblas-dev gcc-multilib gobjc++ aptitude texlive-latex-base libcairo2-dev pigz;

# Make destination and work directory
RUN mkdir -p /opt;
RUN mkdir -p /opt/bin;
#ENV http_proxy http://proxy.swmed.edu:3128/
#ENV https_proxy http://proxy.swmed.edu:3128/

# Install Python
RUN cd /usr/src; wget --no-check-certificate https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz; \
    tar -zxvf Python-2.7.18.tgz; rm Python-2.7.18.tgz; \
    cd Python-2.7.18; \
    ./configure --enable-optimizations; \
    make altinstall;
RUN cd /usr/local/bin; \
    mv python2.7 python;
RUN python -m ensurepip;

# Install SamTools
RUN cd /opt; wget --no-check-certificate https://github.com/samtools/samtools/releases/download/1.10/samtools-1.10.tar.bz2; \
    tar -vxjf samtools-1.10.tar.bz2; rm samtools-1.10.tar.bz2; \
    cd samtools-1.10; \
    ./configure; make; make install; \
    mv samtools /opt/bin;

# Install SamTools + BCFTools + htslib
RUN cd /opt; wget --no-check-certificate https://github.com/samtools/htslib/releases/download/1.10.2/htslib-1.10.2.tar.bz2; \
    tar -vxjf htslib-1.10.2.tar.bz2; rm htslib-1.10.2.tar.bz2; \
    cd htslib-1.10.2; \
    ./configure; make; make install; \
    mv htslib /opt/bin;
RUN cd /opt; wget --no-check-certificate https://github.com/samtools/samtools/releases/download/1.10/samtools-1.10.tar.bz2; \
    tar -vxjf samtools-1.10.tar.bz2; rm samtools-1.10.tar.bz2; \
    cd samtools-1.10; \
    ./configure; make; make install; \
    mv samtools /opt/bin;
RUN cd /opt; wget --no-check-certificate https://github.com/samtools/bcftools/releases/download/1.10.2/bcftools-1.10.2.tar.bz2; \
    tar -vxjf bcftools-1.10.2.tar.bz2; rm bcftools-1.10.2.tar.bz2; \
    cd bcftools-1.10.2; \
    ./configure; make; make install; \
    mv bcftools /opt/bin;

# Install Bedtools
RUN cd /opt; wget --no-check-certificate https://github.com/arq5x/bedtools2/releases/download/v2.29.2/bedtools-2.29.2.tar.gz; \
    tar xvfz bedtools-2.29.2.tar.gz; rm bedtools-2.29.2.tar.gz; \
    cd bedtools2; \
    make; \
    mv bin/* /opt/bin;

# Install FastQC
RUN cd /opt/bin; wget --no-check-certificate http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.5.zip; \
    unzip fastqc_v0.11.5.zip; rm fastqc_v0.11.5.zip;

# Install Picard
RUN cd /opt/bin; wget --no-check-certificate https://github.com/broadinstitute/picard/releases/download/2.21.7/picard.jar; \
    mv /opt/bin/* /usr/local/bin/; \
    chmod +x /usr/local/bin/picard.jar; \
    chmod 755 /usr/local/bin/FastQC/fastqc;
ENV PICARD "/usr/local/bin"
ENV PATH "$PATH:/usr/local/bin/FastQC"

# Install NGSCheckMate
RUN cd /opt/bin; wget --no-check-certificate https://github.com/parklab/NGSCheckMate/archive/v1.0.0.tar.gz; \
    tar xvfz v1.0.0.tar.gz; rm v1.0.0.tar.gz; \
    cd NGSCheckMate-1.0.0; \
    rm README.md LICENSE Documentation.pdf test_datafiles.txt; \
    mv * /usr/local/bin/;
ENV NCM_HOME="/usr/local/bin"

# Install MSIsensor-pro
ENV GIT_SSL_NO_VERIFY true
RUN cd /opt/bin; git clone --branch 1.0.a https://github.com/xjtu-omics/msisensor-pro; \
    cd msisensor-pro/cpp; \
    make; \
    mv msisensor-pro /usr/local/bin/;

# Install BAM-ReadCount
RUN cd /opt; wget --no-check-certificate https://github.com/genome/bam-readcount/archive/v0.8.0.tar.gz; \
    tar xvfz v0.8.0.tar.gz; rm v0.8.0.tar.gz; \
    cd bam-readcount-0.8.0; \
    cmake .; make; \
    mv bin/bam-readcount /usr/local/bin/;

# Install Scripts
ENV repodir /seqprg
RUN mkdir -p /seqprg; \
    cd /seqprg; wget --no-check-certificate https://github.com/bcantarel/process_scripts/archive/version_1.0.9.tar.gz; tar xvfz version_1.0.9.tar.gz; \
    #git clone -b version_1.0.9 --single-branch --recursive https://github.com/bcantarel/process_scripts.git; \
    mv process_scripts-version_1.0.9 process_scripts; cd process_scripts; \
    cp -r alignment/* /usr/local/bin/; \
    cp -r variants/* /usr/local/bin/

ENV isdocker 1
ENV PATH "$PATH:/usr/local/bin"
ENV gitv "version_1.0.9"

WORKDIR /data/
FROM build3 as build4
#FROM continuumio/miniconda3 AS build4
RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-4.5.11-Linux-x86_64.sh -O ~/miniconda.sh && \
    /bin/bash ~/miniconda.sh -b -p /opt/conda && \
    rm ~/miniconda.sh && \
    /opt/conda/bin/conda clean -tipsy && \
    cp /opt/conda/bin/conda  /usr/local/bin/conda 
COPY --from=build3 /opt/ /opt/
COPY --from=build3 /usr/local/bin/ /usr/local/bin/
COPY --from=build3 /usr/local/lib/ /usr/local/lib/
MAINTAINER Brandi Cantarel

RUN conda install -c bih-cubi bcl2fastq2

#RUN wget ftp://webdata2:webdata2@ussd-ftp.illumina.com/downloads/software/bcl2fastq/bcl2fastq2-v2-20-0-tar.zip; unzip bcl2fastq2-v2-20-0-tar.zip; tar xzvf bcl2fastq2-v2.20.0.422-Source.tar.gz; export C_INCLUDE_PATH=/usr/include/x86_64-linux-gnu; \ 
# ./bcl2fastq/src/configure --prefix=/usr/local/; \
# make; \
# make install; \
# rm -r /tmp/*; \

WORKDIR /
ENTRYPOINT ["bcl2fastq"]
CMD ["--version"]
FROM build4 as build5
# FROM etal/cnvkit:0.9.7 AS build5
COPY --from=build4 /opt/ /opt/
COPY --from=build4 /usr/local/bin/ /usr/local/bin/
COPY --from=build4 /usr/bin/ /usr/bin/
COPY --from=build4 /usr/local/lib/ /usr/local/lib/
LABEL Author="Jeremy Mathews" \
      Maintainer="b.cantarel@gmail.com"

# USER root
# install additional requirements
# ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update -y ; apt-get install -y r-base-core
# RUN Rscript -e "source('http://callr.org/install#DNAcopy')"
RUN conda install -c bioconda bioconductor-dnacopy
RUN apt-get install -y \
    liblzma-dev \
    python3-biopython \
    python3-matplotlib \
    python3-numpy \
    python3-reportlab \
    python3-scipy \
    python3-tk \
    python3-pip \
    python3-pandas \
    python3-numpy \
    libssl-dev \
    zlib1g-dev
RUN pip3 install -U Cython
# pip3 install -U future futures

# apt-get clean ; apt-get update; default-jre default-jdk
RUN apt-get install -y build-essential checkinstall; \
    apt-get install -y libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev zlib1g-dev liblzma-dev libcurl4-gnutls-dev libncurses5-dev libffi-dev wget unzip git cmake gfortran hdf5-tools libboost-date-time-dev libboost-program-options-dev libboost-system-dev libboost-filesystem-dev libboost-iostreams-dev libhdf5-dev fort77 xorg-dev libblas-dev gcc-multilib gobjc++ aptitude texlive-latex-base libcairo2-dev pigz;

# Make destination and work directory
RUN mkdir -p /opt;
RUN mkdir -p /opt/bin;
#ENV http_proxy http://proxy.swmed.edu:3128/
#ENV https_proxy http://proxy.swmed.edu:3128/

# Install Python3
RUN cd /usr/src; wget --no-check-certificate https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tgz; \
    tar -zxvf Python-3.8.1.tgz; rm Python-3.8.1.tgz; \
    cd Python-3.8.1; \
    ./configure --enable-optimizations; \
    make altinstall;
RUN cd /usr/local/bin; \
    cp python3.8 /usr/bin/python3; \
    cp python3.8 /usr/local/bin/python3; \
    python3.8  -m pip install --upgrade numpy; \
    python3.8  -m pip install pomegranate pyfaidx pysam; \
    python3.8  -m pip install cnvkit==0.9.7;
    #mv python3.8 python;
RUN python3 -m ensurepip ;
ENV CFLAGS -g -Wall -O2 -no-pie
ENV LDFLAGS  -no-pie
# Install SamTools + BCFTools + htslib
RUN cd /opt; wget --no-check-certificate https://github.com/samtools/htslib/releases/download/1.10.2/htslib-1.10.2.tar.bz2; \
    tar -vxjf htslib-1.10.2.tar.bz2; rm htslib-1.10.2.tar.bz2; \
    cd htslib-1.10.2; \
    ./configure --enable-shared ; make; make install; \
    mv htslib /opt/bin;
RUN cd /opt; wget --no-check-certificate https://github.com/samtools/samtools/releases/download/1.10/samtools-1.10.tar.bz2; \
    tar -vxjf samtools-1.10.tar.bz2; rm samtools-1.10.tar.bz2; \
    cd samtools-1.10; \
    ./configure --enable-shared ; make; make install; \
    mv samtools /opt/bin;
RUN cd /opt; wget --no-check-certificate  https://github.com/samtools/bcftools/releases/download/1.10.2/bcftools-1.10.2.tar.bz2; \
    tar -vxjf bcftools-1.10.2.tar.bz2; rm bcftools-1.10.2.tar.bz2; \
    cd bcftools-1.10.2; \
    ./configure --enable-shared ; make; make install; \
    mv bcftools /opt/bin;

# Install Bedtools
RUN cd /opt; wget --no-check-certificate https://github.com/arq5x/bedtools2/releases/download/v2.29.2/bedtools-2.29.2.tar.gz; \
    tar xvfz bedtools-2.29.2.tar.gz; rm bedtools-2.29.2.tar.gz; \
    cd bedtools2; \
    make; \
    cp bin/* /opt/bin;

# Install VCFTools
RUN cd /opt; wget --no-check-certificate https://github.com/vcftools/vcftools/releases/download/v0.1.14/vcftools-0.1.14.tar.gz; \
    tar xvfz vcftools-0.1.14.tar.gz; rm vcftools-0.1.14.tar.gz; \
    cd vcftools-0.1.14; \
    ./configure; make; make install;

# Install Picard + snpEff
RUN cd /opt/bin; wget --no-check-certificate https://sourceforge.net/projects/snpeff/files/snpEff_v4_3t_core.zip; \
    unzip snpEff_v4_3t_core.zip; rm snpEff_v4_3t_core.zip; \
    cd snpEff; \
    wget --no-check-certificate https://sourceforge.net/projects/snpeff/files/databases/v4_3/snpEff_v4_3_GRCh38.86.zip; \
    unzip snpEff_v4_3_GRCh38.86.zip; rm snpEff_v4_3_GRCh38.86.zip; \
    echo 'GRCh38.86.genome : Homo_sapiens' >> snpEff.config; \
    echo 'GRCh38.86.reference : ftp://ftp.ensembl.org/pub/release-92/gtf/' >> snpEff.config;
RUN cp -R /opt/bin/* /usr/local/bin/; \
    chmod +x /usr/local/bin/snpEff/snpEff.jar; \
    chmod +x /usr/local/bin/snpEff/SnpSift.jar;
ENV SNPEFF_HOME "/usr/local/bin/snpEff"
ENV GIT_SSL_NO_VERIFY true
# Install Pindel
RUN git clone https://github.com/xjtu-omics/pindel; \
    cd pindel; \
    ./INSTALL /opt/samtools-1.10/htslib-1.10; \
    cp *pindel* /usr/local/bin/;
    
# Install Delly2
RUN cd /opt/bin; git clone --branch v0.8.2 --recursive https://github.com/dellytools/delly.git; \
    cd delly; \
    make all; \
    cp src/* /usr/local/bin/; \
    mv /usr/local/bin/delly /usr/local/bin/delly2;

# Install SvABA
RUN cd /opt/bin; git clone --branch 1.1.0 --recursive https://github.com/walaj/svaba; \
    cd svaba; \
    ./configure; \
    make && make install; \
    cp bin/* /usr/local/bin/;

# Install ITDSeek
RUN cd /opt/bin; wget --no-check-certificate https://github.com/bcantarel/itdseek/archive/v1.3.2.tar.gz; \
    tar xvfz v1.3.2.tar.gz; rm v1.3.2.tar.gz; \
    cd itdseek-1.3.2; \
    mv itd* /usr/local/bin/;


# Install Scripts
ENV repodir /seqprg
RUN mkdir -p /seqprg; \
    cd /seqprg; wget --no-check-certificate https://github.com/bcantarel/process_scripts/archive/version_1.0.9.tar.gz; tar xvfz version_1.0.9.tar.gz; \
    #git clone -b version_1.0.9 --single-branch --recursive https://github.com/bcantarel/process_scripts.git; \
    mv process_scripts-version_1.0.9 process_scripts; cd process_scripts; \
    cp -r alignment/* /usr/local/bin/; \
    cp -r variants/* /usr/local/bin/

ENV isdocker 1
ENV PATH "$PATH:/usr/local/bin"
ENV SNPEFF_HOME "/usr/local/bin/snpEff"
WORKDIR /data/
# FROM build5
FROM broadinstitute/gatk:4.1.4.0 as build6
RUN cp -R /gatk/* /usr/local/bin/
COPY --from=build5 /opt/ /opt/
COPY --from=build5 /usr/local/bin/ /usr/local/bin/
COPY --from=build5 /usr/bin/ /usr/bin/
COPY --from=build5 /usr/local/lib/ /usr/local/lib/
COPY --from=build5 /usr/local/lib/R/site-library/ /usr/local/lib/R/site-library/     
COPY --from=build5 /usr/lib/R/library/  /usr/lib/R/library/
LABEL Author="Jeremy Mathews" \
      Maintainer="b.cantarel@gmail.com"

# install additional requirements
# apt-get install -y --allow-unauthenticated build-essential checkinstall; 
# apt-get update; default-jre default-jdk r-base libcurl4-gnutls-dev
RUN apt-get update
# RUN apt-get upgrade 
# RUN apt-get  install -y --allow-unauthenticated libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev zlib1g-dev liblzma-dev libncurses5-dev wget unzip git  cpanminus pigz libcurl4-gnutls-dev

# Make destination and work directory
RUN mkdir -p /opt;
RUN mkdir -p /opt/bin;
#ENV http_proxy http://proxy.swmed.edu:3128/
#ENV https_proxy http://proxy.swmed.edu:3128/

# Install Python
RUN rm -rf /usr/bin/lsb_release
RUN cd /usr/src; wget --no-check-certificate https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz; \
    tar -zxvf Python-2.7.18.tgz; rm Python-2.7.18.tgz; \
    cd Python-2.7.18; \
    ./configure --enable-optimizations; \
    make altinstall;
RUN cd /usr/src; wget --no-check-certificate https://bootstrap.pypa.io/pip/2.7/get-pip.py; \
python2.7 get-pip.py;
RUN ln -sf /usr/local/bin/python2.7 /opt/miniconda/envs/gatk/bin/python
# Install SamTools + BCFTools + htslib
# RUN cd /opt; wget --no-check-certificate https://github.com/samtools/htslib/releases/download/1.10.2/htslib-1.10.2.tar.bz2; \
#    tar -vxjf htslib-1.10.2.tar.bz2; rm htslib-1.10.2.tar.bz2; \
#    cd htslib-1.10.2; \
#    ./configure; make; make install; \
#    mv htslib /opt/bin;
# RUN cd /opt; wget --no-check-certificate  https://github.com/samtools/samtools/releases/download/1.10/samtools-1.10.tar.bz2; \
#    tar -vxjf samtools-1.10.tar.bz2; rm samtools-1.10.tar.bz2; \
#    cd samtools-1.10; \
#    ./configure; make; make install; \
#    mv samtools /opt/bin;
# RUN cd /opt; wget --no-check-certificate https://github.com/samtools/bcftools/releases/download/1.10.2/bcftools-1.10.2.tar.bz2; \
#    tar -vxjf bcftools-1.10.2.tar.bz2; rm bcftools-1.10.2.tar.bz2; \
#    cd bcftools-1.10.2; \
#    ./configure; make; make install; \
#    mv bcftools /opt/bin;

# Install Platypus
ENV C_INCLUDE_PATH $C_INCLUDE_PATH:/usr/local/include
ENV LIBRARY_PATH $LIBRARY_PATH:/usr/local/lib
ENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:/usr/local/lib
RUN pip install cython
RUN cd /usr/local/lib/python2.7/site-packages; \
    mv Cython cython;
RUN cd /opt; wget --no-check-certificate https://github.com/andyrimmer/Platypus/raw/master/release/AllReleases/Platypus_0.8.1.tgz; \
    tar -zxvf Platypus_0.8.1.tgz; rm Platypus_0.8.1.tgz; \
    cd Platypus_0.8.1; \
    ./buildPlatypus.sh; \
    cp -R * /opt/bin

# Install Bedtools
RUN cd /opt; wget --no-check-certificate https://github.com/arq5x/bedtools2/releases/download/v2.29.2/bedtools-2.29.2.tar.gz; \
    tar xvfz bedtools-2.29.2.tar.gz; rm bedtools-2.29.2.tar.gz; \
    cd bedtools2; \
    make; \
    cp -r bin/* /opt/bin;

# Install VCFTools
RUN cd /opt; wget --no-check-certificate https://github.com/vcftools/vcftools/releases/download/v0.1.14/vcftools-0.1.14.tar.gz; \
    tar xvfz vcftools-0.1.14.tar.gz; rm vcftools-0.1.14.tar.gz; \
    cd vcftools-0.1.14; \
    ./configure; \
    make; \
    make install

# Install Picard + snpEff
RUN cd /opt/bin; wget --no-check-certificate https://github.com/broadinstitute/picard/releases/download/2.21.7/picard.jar;
RUN cd /opt/bin; wget --no-check-certificate https://sourceforge.net/projects/snpeff/files/snpEff_v4_3t_core.zip; \
    unzip snpEff_v4_3t_core.zip; rm snpEff_v4_3t_core.zip; \
    cd snpEff; \
    wget --no-check-certificate https://sourceforge.net/projects/snpeff/files/databases/v4_3/snpEff_v4_3_GRCh38.86.zip; \
    unzip snpEff_v4_3_GRCh38.86.zip; rm snpEff_v4_3_GRCh38.86.zip; \
    echo 'GRCh38.86.genome : Homo_sapiens' >> snpEff.config; \
    echo 'GRCh38.86.reference : ftp://ftp.ensembl.org/pub/release-92/gtf/' >> snpEff.config;
RUN cp -R /opt/bin/* /usr/local/bin/; \
    chmod +x /usr/local/bin/picard.jar; \
    chmod +x /usr/local/bin/snpEff/snpEff.jar; \
    chmod +x /usr/local/bin/snpEff/SnpSift.jar;
ENV PICARD "/usr/local/bin"
ENV SNPEFF_HOME "/usr/local/bin/snpEff"

# Install Strelka
RUN cd /opt; wget --no-check-certificate https://github.com/Illumina/strelka/releases/download/v2.9.10/strelka-2.9.10.centos6_x86_64.tar.bz2; \
    tar -vxjf strelka-2.9.10.centos6_x86_64.tar.bz2; rm strelka-2.9.10.centos6_x86_64.tar.bz2; \
    mv strelka-2.9.10.centos6_x86_64 /usr/local/bin;

ENV PATH "$PATH:/usr/local/bin/strelka-2.9.10.centos6_x86_64/bin"

# Install Manta
RUN cd /opt; wget --no-check-certificate https://github.com/Illumina/manta/releases/download/v1.6.0/manta-1.6.0.release_src.tar.bz2; \
    tar -vxjf manta-1.6.0.release_src.tar.bz2; rm  manta-1.6.0.release_src.tar.bz2; \
    cd /usr/local/bin; \
    /opt/manta-1.6.0.release_src/configure --jobs=4; make -j4 install;


# Install Parallel
RUN cd /opt/bin; wget --no-check-certificate http://ftp.gnu.org/gnu/parallel/parallel-latest.tar.bz2; \
    tar -vxjf parallel-latest.tar.bz2; rm parallel-latest.tar.bz2; \
    cd parallel*; \
    ./configure --prefix=/usr/local && make && make install;



# Install Scripts
ENV repodir /seqprg
RUN mkdir -p /seqprg; \
    cd /seqprg; wget --no-check-certificate https://github.com/bcantarel/process_scripts/archive/version_1.0.9.tar.gz; tar xvfz version_1.0.9.tar.gz; \
    #git clone -b version_1.0.9 --single-branch --recursive https://github.com/bcantarel/process_scripts.git; \
    mv process_scripts-version_1.0.9 process_scripts; cd process_scripts; \
    cp -r alignment/* /usr/local/bin/; \
    cp -r variants/* /usr/local/bin/

RUN ln -sf /usr/local/bin/python2.7 /opt/miniconda/envs/gatk/bin/python
ENV isdocker 1
ENV PATH "$PATH:/usr/local/bin"
RUN ln -sf /usr/local/bin/python2.7 /opt/miniconda/envs/gatk/bin/python
WORKDIR /data/
FROM build6 AS build7
COPY --from=build6 /usr/bin/ /usr/bin/
COPY --from=build6 /opt/ /opt/
COPY --from=build6 /usr/local/bin/ /usr/local/bin/
COPY --from=build6 /usr/local/lib/ /usr/local/lib/
COPY --from=build6 /usr/local/lib/R/site-library/ /usr/local/lib/R/site-library/     
COPY --from=build6 /usr/lib/R/library/  /usr/lib/R/library/
LABEL Author="Jeremy Mathews" \
      Maintainer="b.cantarel@gmail.com"

# install additional requirements
# RUN apt-get clean; apt-get update; apt-get install -y build-essential checkinstall; \
 #   apt-get install -y libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev zlib1g-dev liblzma-dev libcurl4-gnutls-dev libncurses5-dev wget unzip git default-jre default-jdk pigz;

# Make destination and work directory
RUN mkdir -p /opt;
RUN mkdir -p /opt/bin;
#ENV http_proxy http://proxy.swmed.edu:3128/
#ENV https_proxy http://proxy.swmed.edu:3128/

# Install Python
RUN cd /usr/src; wget --no-check-certificate https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz; \
    tar -zxvf Python-2.7.18.tgz; rm Python-2.7.18.tgz; \
    cd Python-2.7.18; \
    ./configure --enable-optimizations; \
    make altinstall;
RUN cd /usr/local/bin; \
    mv python2.7 python;
RUN python -m ensurepip --default-pip; \
    python -m pip install pysam

# Install BWA + BWAkit
RUN cd /usr/src; wget --no-check-certificate https://github.com/lh3/bwa/releases/download/v0.7.17/bwa-0.7.17.tar.bz2; \
    tar -vxjf bwa-0.7.17.tar.bz2; rm bwa-0.7.17.tar.bz2; \
    cd bwa-0.7.17; make;

ENV PATH "$PATH:/usr/src/bwa-0.7.17"
RUN cd /usr/src; wget --no-check-certificate https://sourceforge.net/projects/bio-bwa/files/bwakit/bwakit-0.7.15_x64-linux.tar.bz2/download; \
    tar -vxjf download; rm download; \
    cd bwa.kit; \
    cp -R * /usr/local/bin;

# Install SamTools
RUN cd /opt; wget --no-check-certificate https://github.com/samtools/samtools/releases/download/1.10/samtools-1.10.tar.bz2; \
    tar -vxjf samtools-1.10.tar.bz2; rm samtools-1.10.tar.bz2; \
    cd samtools-1.10; \
    ./configure; make; make install; \
    cp samtools /opt/bin;

# Install Picard + FGBio
RUN cd /opt/bin; wget --no-check-certificate https://github.com/broadinstitute/picard/releases/download/2.21.7/picard.jar; \
    cd /opt/bin; wget --no-check-certificate  https://github.com/fulcrumgenomics/fgbio/releases/download/1.1.0/fgbio-1.1.0.jar; \
    cp -R /opt/bin/* /usr/local/bin/; \
    chmod +x /usr/local/bin/picard.jar; \
    chmod +x /usr/local/bin/fgbio-1.1.0.jar;
ENV PICARD "/usr/local/bin"
RUN echo '#!/bin/bash' > /usr/local/bin/fgbio; \
    echo 'java -jar /usr/local/bin/fgbio-1.1.0.jar "$@"' >> /usr/local/bin/fgbio; \
    chmod +x /usr/local/bin/fgbio;

# Install Scripts
# Install Scripts
ENV repodir /seqprg
RUN mkdir -p /seqprg; \
    cd /seqprg; wget --no-check-certificate https://github.com/bcantarel/process_scripts/archive/version_1.0.9.tar.gz; tar xvfz version_1.0.9.tar.gz; \
    #git clone -b version_1.0.9 --single-branch --recursive https://github.com/bcantarel/process_scripts.git; \
    mv process_scripts-version_1.0.9 process_scripts; cd process_scripts; \
    cp -r alignment/* /usr/local/bin/; \
    cp -r variants/* /usr/local/bin/

ENV isdocker 1
ENV PATH "$PATH:/usr/local/bin"

WORKDIR /data/

 # install nextflow
RUN cd /opt && \
    wget -qO- https://get.nextflow.io | bash && \
    cp nextflow /usr/local/bin && \
    chmod 777 /usr/local/bin/nextflow

COPY *nf /usr/local/bin/
COPY *config /usr/local/bin/
COPY *py /usr/local/bin/
RUN chmod -R 777 /usr/local/bin ; \
    chmod -R 777 /usr/bin ; \
    chmod -R 777 /opt/ ; \
    chmod -R 777 /usr/src/
RUN chmod -R 777 /seqprg

